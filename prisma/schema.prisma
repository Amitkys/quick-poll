// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId 
  name     String  @unique
  email    String  @unique
  avatar   String
  polls    Poll[]
  votes    Vote[]
}

model Poll {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId 
  title   String
  options    String[]
  created_at DateTime @default(now())
  expires_at DateTime
  votes      Vote[] 
  creator    User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId  String   @db.ObjectId
}

model Vote {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId 
  poll_id  String  @db.ObjectId
  userId   String  @db.ObjectId  // Ensures a user can vote only once per poll
  options  String  // The selected option
  created_at DateTime @default(now())

  poll     Poll  @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([poll_id, userId])  // Prevents duplicate votes from the same user
}
